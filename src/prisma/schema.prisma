generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountStatus {
  ACTIVE
  BLOCKED
}

enum TransferStatus {
  SCHEDULED
  DONE
  CANCELED
}

model UserAuth {
  cpf                String    @id @db.VarChar(14)
  bcrypt_user        String    @db.Char(60)
  bcrypt_transaction String    @db.Char(60)
  created_at         DateTime  @default(now()) @db.Timestamp()
  updated_at         DateTime  @updatedAt @db.Timestamp()
  // ================================================================================
  address            Address?
  user_info          UserInfo?
  accounts           Account[]
}

model Address {
  user_cpf      String   @id @db.VarChar(14)
  cep           String   @db.Char(8)
  street        String   @db.VarChar(120)
  number        Int      @db.SmallInt
  complement    String   @db.VarChar(300)
  neighbourhood String   @db.VarChar(100)
  city          String   @db.VarChar(100)
  state         String   @db.Char(2)
  created_at    DateTime @default(now()) @db.Timestamp()
  updated_at    DateTime @updatedAt @db.Timestamp()
  // ================================================================================
  user          UserAuth @relation(fields: [user_cpf], references: [cpf])
}

model UserInfo {
  cpf        String   @id @db.VarChar(14)
  name       String   @db.VarChar(200)
  email      String   @db.VarChar(320)
  phone      String   @db.VarChar(13)
  birthday   DateTime @db.Date
  created_at DateTime @default(now()) @db.Timestamp()
  updated_at DateTime @updatedAt @db.Timestamp()
  // ================================================================================
  user       UserAuth @relation(fields: [cpf], references: [cpf])
}

model Account {
  account_number     Int           @id @db.Integer
  agency             Int           @db.SmallInt
  balance            Decimal       @db.Money
  owner_cpf          String        @db.VarChar(14)
  account_status     AccountStatus @default(ACTIVE)
  created_at         DateTime      @default(now()) @db.Timestamp()
  updated_at         DateTime      @updatedAt @db.Timestamp()
  // ================================================================================
  user               UserAuth      @relation(fields: [owner_cpf], references: [cpf])
  sent_transfers     Transfer[]    @relation(name: "debits")
  received_transfers Transfer[]    @relation(name: "credits")
}

model Transfer {
  id                  String         @id @default(uuid()) @db.Uuid
  account_number_from Int            @db.Integer
  account_number_to   Int            @db.Integer
  value               Decimal        @db.Money
  time_of_transfer    DateTime       @default(now()) @db.Timestamp()
  transfer_status     TransferStatus @default(DONE)
  created_at          DateTime       @default(now()) @db.Timestamp()
  updated_at          DateTime       @updatedAt @db.Timestamp()
  // ================================================================================
  debited_account     Account        @relation(name: "debits", fields: [account_number_from], references: [account_number])
  credited_account    Account        @relation(name: "credits", fields: [account_number_to], references: [account_number])
}
