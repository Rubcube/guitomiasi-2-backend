generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountStatus {
  ACTIVE
  BLOCKED
  INACTIVE
}

enum TransferStatus {
  SCHEDULED
  DONE
  CANCELED
}

enum UserStatus {
  ACTIVE
  BLOCKED
  INACTIVE
}

model UserAuth {
  id                   String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bcrypt_user_password String     @db.Char(60)
  user_status          UserStatus @default(ACTIVE)
  created_at           DateTime   @default(now()) @db.Timestamp()
  updated_at           DateTime   @updatedAt @db.Timestamp()
  // ================================================================================
  address              Address?
  user_info            UserInfo?
  accounts             Account[]
}

model Address {
  owner_id      String   @id @db.Uuid
  cep           String   @db.Char(8)
  street        String   @db.VarChar(120)
  number        Int      @db.Integer
  complement    String?  @db.VarChar(300)
  neighbourhood String   @db.VarChar(100)
  city          String   @db.VarChar(100)
  state         String   @db.Char(2)
  created_at    DateTime @default(now()) @db.Timestamp()
  updated_at    DateTime @updatedAt @db.Timestamp()
  // ================================================================================
  user          UserAuth @relation(fields: [owner_id], references: [id])
}

model UserInfo {
  id         String    @id @db.Uuid
  document   String    @unique @db.VarChar(14)
  name       String    @db.VarChar(200)
  email      String    @db.VarChar(320)
  phone      String    @db.VarChar(13)
  birthday   DateTime? @db.Date
  created_at DateTime  @default(now()) @db.Timestamp()
  updated_at DateTime  @updatedAt @db.Timestamp()
  // ================================================================================
  user       UserAuth  @relation(fields: [id], references: [id])
}

model Account {
  id                          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  account_number              Int           @unique @db.Integer
  bcrypt_transaction_password String        @db.Char(60)
  agency                      Int           @db.Integer
  balance                     Decimal       @db.Money
  owner_id                    String        @db.Uuid
  account_status              AccountStatus @default(ACTIVE)
  created_at                  DateTime      @default(now()) @db.Timestamp()
  updated_at                  DateTime      @updatedAt @db.Timestamp()
  // ================================================================================
  user                        UserAuth      @relation(fields: [owner_id], references: [id])
  sent_transfers              Transfer[]    @relation(name: "debits")
  received_transfers          Transfer[]    @relation(name: "credits")
}

model Transfer {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  account_id_from  String         @db.Uuid
  account_id_to    String         @db.Uuid
  value            Decimal        @db.Money
  time_to_transfer DateTime?      @default(now()) @db.Timestamp()
  transfer_status  TransferStatus @default(DONE)
  created_at       DateTime       @default(now()) @db.Timestamp()
  updated_at       DateTime       @updatedAt @db.Timestamp()
  // ================================================================================
  debited_account  Account        @relation(name: "debits", fields: [account_id_from], references: [id])
  credited_account Account        @relation(name: "credits", fields: [account_id_to], references: [id])
}
